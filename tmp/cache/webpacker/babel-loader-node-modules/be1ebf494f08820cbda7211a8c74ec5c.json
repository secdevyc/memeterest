{"ast":null,"code":"var _jsxFileName = \"/Users/yc/dev/memeterest/app/javascript/components/Main.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n// DEPENDENCIES //\nimport React from 'react'; //components //\n\nimport Form from './Form.js';\nimport Post from './Post.js'; // COMPONENT CLASS //\n\nvar Main =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Main, _React$Component);\n\n  // state //\n  function Main(props) {\n    var _this;\n\n    _classCallCheck(this, Main);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Main).call(this, props));\n\n    _this.fetchMemes = function () {\n      fetch('api/memes').then(function (data) {\n        return data.json();\n      }).then(function (jData) {\n        _this.setState({\n          memes: jData\n        });\n      });\n    };\n\n    _this.handleCreate = function (createMeme) {\n      console.log(createMeme);\n      fetch(\"/api/memes\", {\n        body: JSON.stringify(createMeme),\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(function (createdMeme) {\n        return createdMeme.json();\n      }).then(function (jsonedMeme) {\n        // take the user back to the index page\n        _this.props.handleView('home'); // update state with our new meme\n\n\n        _this.setState(function (prevState) {\n          prevState.memes.unshift(jsonedMeme);\n          return {\n            memes: prevState.memes\n          };\n        });\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.handleUpdate = function (updateMeme) {\n      fetch(\"/api/memes/\".concat(updateMeme.id), {\n        body: JSON.stringify(updateMeme),\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(function (updatedMeme) {\n        //switch back to home after editing meme\n        _this.props.handleView('home');\n\n        _this.fetchMemes();\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.handleDelete = function (id) {\n      fetch(\"/api/memes/\".concat(id), {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        }\n      }).then(function (json) {\n        _this.setState(function (prevState) {\n          var memes = prevState.memes.filter(function (meme) {\n            return meme.id !== id;\n          });\n          return {\n            memes: memes\n          };\n        });\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.state = {\n      memes: [],\n      image: ''\n    };\n    return _this;\n  } // handlers //\n  // fetches all the data\n\n\n  _createClass(Main, [{\n    key: \"componentDidMount\",\n    // life cycles //\n    value: function componentDidMount() {\n      this.fetchMemes();\n    } // render //\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, this.props.view.page === 'home' ? this.state.memes.map(function (memes) {\n        return React.createElement(\"div\", {\n          className: \"card-container\",\n          key: memes.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(Post, {\n          memes: memes,\n          handleView: _this2.props.handleView,\n          handleDelete: _this2.handleDelete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }));\n      }) : React.createElement(Form, {\n        handleCreate: this.handleCreate,\n        handleUpdate: this.handleUpdate,\n        formInputs: this.props.formInputs,\n        view: this.props.view,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Main;\n}(React.Component); // EXPORT //\n\n\nexport default Main;","map":{"version":3,"sources":["/Users/yc/dev/memeterest/app/javascript/components/Main.js"],"names":["React","Form","Post","Main","props","fetchMemes","fetch","then","data","json","jData","setState","memes","handleCreate","createMeme","console","log","body","JSON","stringify","method","headers","createdMeme","jsonedMeme","handleView","prevState","unshift","err","handleUpdate","updateMeme","id","updatedMeme","handleDelete","filter","meme","state","image","view","page","map","formInputs","Component"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;;IACMC,I;;;;;AACJ;AACA,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8EAAMA,KAAN;;AADiB,UASnBC,UATmB,GASN,YAAM;AACjBC,MAAAA,KAAK,CAAC,WAAD,CAAL,CACGC,IADH,CACQ,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,OADZ,EAEGF,IAFH,CAEQ,UAAAG,KAAK,EAAI;AACb,cAAKC,QAAL,CAAc;AAAEC,UAAAA,KAAK,EAAEF;AAAT,SAAd;AACD,OAJH;AAKD,KAfkB;;AAAA,UAgBnBG,YAhBmB,GAgBJ,UAACC,UAAD,EAAgB;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAR,MAAAA,KAAK,eAAe;AAClBW,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,UAAf,CADY;AAElBM,QAAAA,MAAM,EAAE,MAFU;AAGlBC,QAAAA,OAAO,EAAE;AACP,oBAAU,mCADH;AAEP,0BAAgB;AAFT;AAHS,OAAf,CAAL,CAQGd,IARH,CAQQ,UAAAe,WAAW,EAAI;AACnB,eAAOA,WAAW,CAACb,IAAZ,EAAP;AACD,OAVH,EAWGF,IAXH,CAWQ,UAAAgB,UAAU,EAAI;AAClB;AACA,cAAKnB,KAAL,CAAWoB,UAAX,CAAsB,MAAtB,EAFkB,CAGlB;;;AACA,cAAKb,QAAL,CAAc,UAAAc,SAAS,EAAI;AACzBA,UAAAA,SAAS,CAACb,KAAV,CAAgBc,OAAhB,CAAwBH,UAAxB;AACA,iBAAO;AAACX,YAAAA,KAAK,EAAEa,SAAS,CAACb;AAAlB,WAAP;AACD,SAHD;AAID,OAnBH,WAoBS,UAAAe,GAAG;AAAA,eAAIZ,OAAO,CAACC,GAAR,CAAYW,GAAZ,CAAJ;AAAA,OApBZ;AAqBD,KAvCkB;;AAAA,UAyCnBC,YAzCmB,GAyCJ,UAACC,UAAD,EAAgB;AAC7BvB,MAAAA,KAAK,sBAAeuB,UAAU,CAACC,EAA1B,GAAgC;AACnCb,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeU,UAAf,CAD6B;AAEnCT,QAAAA,MAAM,EAAE,KAF2B;AAGnCC,QAAAA,OAAO,EAAE;AACP,oBAAU,mCADH;AAEP,0BAAgB;AAFT;AAH0B,OAAhC,CAAL,CAQGd,IARH,CAQQ,UAAAwB,WAAW,EAAI;AACnB;AACA,cAAK3B,KAAL,CAAWoB,UAAX,CAAsB,MAAtB;;AACA,cAAKnB,UAAL;AACD,OAZH,WAaS,UAAAsB,GAAG;AAAA,eAAIZ,OAAO,CAACC,GAAR,CAAYW,GAAZ,CAAJ;AAAA,OAbZ;AAcD,KAxDkB;;AAAA,UA0DnBK,YA1DmB,GA0DJ,UAACF,EAAD,EAAQ;AACrBxB,MAAAA,KAAK,sBAAewB,EAAf,GAAqB;AACxBV,QAAAA,MAAM,EAAE,QADgB;AAExBC,QAAAA,OAAO,EAAE;AACP,oBAAU,mCADH;AAEP,0BAAgB;AAFT;AAFe,OAArB,CAAL,CAOGd,IAPH,CAOQ,UAAAE,IAAI,EAAI;AACZ,cAAKE,QAAL,CAAc,UAAAc,SAAS,EAAI;AACzB,cAAMb,KAAK,GAAGa,SAAS,CAACb,KAAV,CAAgBqB,MAAhB,CAAuB,UAAAC,IAAI;AAAA,mBAAIA,IAAI,CAACJ,EAAL,KAAYA,EAAhB;AAAA,WAA3B,CAAd;AACA,iBAAO;AAAElB,YAAAA,KAAK,EAALA;AAAF,WAAP;AACD,SAHD;AAID,OAZH,WAaS,UAAAe,GAAG;AAAA,eAAIZ,OAAO,CAACC,GAAR,CAAYW,GAAZ,CAAJ;AAAA,OAbZ;AAcD,KAzEkB;;AAEjB,UAAKQ,KAAL,GAAa;AACXvB,MAAAA,KAAK,EAAE,EADI;AAEXwB,MAAAA,KAAK,EAAE;AAFI,KAAb;AAFiB;AAMlB,G,CACD;AACA;;;;;AAkEA;wCACoB;AACpB,WAAK/B,UAAL;AACD,K,CACC;;;;6BACU;AAAA;;AACR,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,KAAKD,KAAL,CAAWiC,IAAX,CAAgBC,IAAhB,KAAyB,MAAzB,GAAkC,KAAKH,KAAL,CAAWvB,KAAX,CAAiB2B,GAAjB,CAAsB,UAAC3B,KAAD;AAAA,eACxD;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAgC,UAAA,GAAG,EAAEA,KAAK,CAACkB,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAElB,KAAb;AACM,UAAA,UAAU,EAAE,MAAI,CAACR,KAAL,CAAWoB,UAD7B;AAEM,UAAA,YAAY,EAAE,MAAI,CAACQ,YAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADwD;AAAA,OAAtB,CAAlC,GAQA,oBAAC,IAAD;AACI,QAAA,YAAY,EAAE,KAAKnB,YADvB;AAEI,QAAA,YAAY,EAAE,KAAKe,YAFvB;AAGI,QAAA,UAAU,EAAE,KAAKxB,KAAL,CAAWoC,UAH3B;AAII,QAAA,IAAI,EAAE,KAAKpC,KAAL,CAAWiC,IAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,CADF;AAmBD;;;;EArGgBrC,KAAK,CAACyC,S,GAwGzB;;;AACA,eAAetC,IAAf","sourcesContent":["// DEPENDENCIES //\nimport React from 'react'\n\n//components //\nimport Form from './Form.js'\nimport Post from './Post.js'\n\n// COMPONENT CLASS //\nclass Main extends React.Component {\n  // state //\n  constructor(props) {\n    super(props)\n    this.state = {\n      memes: [],\n      image: ''\n    }\n  }\n  // handlers //\n  // fetches all the data\n  fetchMemes = () => {\n    fetch('api/memes')\n      .then(data => data.json())\n      .then(jData => {\n        this.setState({ memes: jData })\n      })\n  }\n  handleCreate = (createMeme) => {\n    console.log(createMeme);\n    fetch(`/api/memes`, {\n      body: JSON.stringify(createMeme),\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(createdMeme => {\n        return createdMeme.json()\n      })\n      .then(jsonedMeme => {\n        // take the user back to the index page\n        this.props.handleView('home')\n        // update state with our new meme\n        this.setState(prevState => {\n          prevState.memes.unshift(jsonedMeme)\n          return {memes: prevState.memes}\n        })\n      })\n      .catch(err => console.log(err))\n  }\n\n  handleUpdate = (updateMeme) => {\n    fetch(`/api/memes/${updateMeme.id}`, {\n      body: JSON.stringify(updateMeme),\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(updatedMeme => {\n        //switch back to home after editing meme\n        this.props.handleView('home')\n        this.fetchMemes()\n      })\n      .catch(err => console.log(err))\n  }\n\n  handleDelete = (id) => {\n    fetch(`/api/memes/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(json => {\n        this.setState(prevState => {\n          const memes = prevState.memes.filter(meme => meme.id !== id)\n          return { memes }\n        })\n      })\n      .catch(err => console.log(err))\n  }\n  // life cycles //\n  componentDidMount() {\n  this.fetchMemes()\n}\n  // render //\n  render () {\n    return (\n      <main>\n        { this.props.view.page === 'home' ? this.state.memes.map ((memes) => (\n          <div className=\"card-container\" key={memes.id}>\n            <Post memes={memes}\n                  handleView={this.props.handleView}\n                  handleDelete={this.handleDelete}\n                  />\n          </div>\n        ))\n        : <Form\n              handleCreate={this.handleCreate}\n              handleUpdate={this.handleUpdate}\n              formInputs={this.props.formInputs}\n              view={this.props.view}\n              />\n      }\n      </main>\n    )\n  }\n}\n\n// EXPORT //\nexport default Main\n"]},"metadata":{},"sourceType":"module"}